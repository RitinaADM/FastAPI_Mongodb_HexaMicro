version: "3.8"

services:
  user_service_app:
    build:
      context: .
      dockerfile: user_service/docker/Dockerfile
    container_name: user_service_app
    ports:
      - "8001:8000"
    depends_on:
      user_service_mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - user_service/.env  # Обновленный путь

  note_service_app:
    build:
      context: .
      dockerfile: note_service/docker/Dockerfile
    container_name: note_service_app
    ports:
      - "8002:8000"
    depends_on:
      note_service_mongodb:
        condition: service_healthy
    env_file:
      - note_service/.env  # Обновленный путь

  user_service_mongodb:
    image: mongo:latest
    container_name: user_service_mongodb
    restart: always
    ports:
      - "27001:27017"
    volumes:
      - mongo_data_user:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  note_service_mongodb:
    image: mongo:latest
    container_name: note_service_mongodb
    restart: always
    ports:
      - "27002:27017"
    volumes:
      - mongo_data_note:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  mongo_data_user:
  mongo_data_note:
  rabbitmq_data: